// src/workers/orchestrator.worker.ts

/**
 * Orchestrator Worker
 * 
 * Ce worker est le chef d'orchestre du Neural Mesh.
 * Il re√ßoit les requ√™tes de l'UI, coordonne les autres workers,
 * et retourne la r√©ponse finale.
 */

import type { WorkerMessage, QueryPayload, FinalResponsePayload } from '../types';

// √âcouteur principal pour les messages provenant du thread principal
self.addEventListener('message', async (event: MessageEvent<WorkerMessage>) => {
  const { type, payload } = event.data;

  try {
    switch (type) {
      case 'query':
        await handleQuery(payload as QueryPayload);
        break;
      
      case 'init':
        // Initialisation du worker si n√©cessaire
        console.log('[Orchestrator] Initialized');
        break;
      
      default:
        console.warn(`[Orchestrator] Unknown message type: ${type}`);
    }
  } catch (error) {
    console.error('[Orchestrator] Error processing message:', error);
    sendResponse({
      response: 'Une erreur est survenue lors du traitement de votre demande.',
      confidence: 0
    });
  }
});

/**
 * Traite une requ√™te utilisateur
 */
async function handleQuery(payload: QueryPayload): Promise<void> {
  console.log('[Orchestrator] Requ√™te re√ßue:', payload.query);
  
  // TODO: Impl√©menter la logique d'orchestration compl√®te
  // 1. Analyser la requ√™te avec le reasoning worker
  // 2. R√©cup√©rer les informations pertinentes avec le memory worker
  // 3. G√©n√©rer la r√©ponse finale via le d√©bat du Neural Mesh
  
  // Pour l'instant, r√©ponse simple pour valider la communication
  const response = `J'ai bien re√ßu votre message : "${payload.query}". 

Je suis ORION, votre assistant IA fonctionnant avec une architecture de Neural Mesh. La communication entre l'interface et l'orchestrateur est maintenant √©tablie avec succ√®s !

**Prochaines √©tapes :**
- Coordination avec les agents Reasoning et Memory
- D√©marrage du d√©bat du Neural Mesh
- G√©n√©ration de r√©ponses contextuelles

üéØ L'orchestrateur est op√©rationnel et pr√™t pour l'impl√©mentation du syst√®me complet.`;

  sendResponse({
    response,
    confidence: 0.9
  });
  
  console.log('[Orchestrator] R√©ponse envoy√©e √† l\'UI');
}

/**
 * Envoie une r√©ponse au thread principal
 */
function sendResponse(payload: FinalResponsePayload): void {
  const message: WorkerMessage<FinalResponsePayload> = {
    type: 'final_response',
    payload
  };
  self.postMessage(message);
}

/**
 * Chain-of-Thought Reasoning - Raisonnement √©tape par √©tape
 * 
 * Ce module aide l'IA √† "r√©fl√©chir √† voix haute" avant de r√©pondre,
 * r√©duisant ainsi les erreurs de raisonnement
 */

import { logger } from '../logger';

export interface ReasoningStep {
  step: number;
  thought: string;
  conclusion?: string;
  confidence: number;
}

export interface ChainOfThought {
  steps: ReasoningStep[];
  finalConclusion: string;
  overallConfidence: number;
  reasoning: string; // Texte complet du raisonnement
}

/**
 * G√©n√®re un prompt de Chain-of-Thought pour am√©liorer le raisonnement
 */
export function generateCoTPrompt(query: string, context?: string): string {
  const cotInstructions = `
Pour r√©pondre √† cette question, proc√®de par √©tapes de raisonnement :

1. COMPRENDRE : Reformule la question dans tes propres mots pour v√©rifier ta compr√©hension
2. ANALYSER : Identifie les √©l√©ments cl√©s et les informations pertinentes
3. RAISONNER : D√©compose le probl√®me et explore les diff√©rentes pistes
4. V√âRIFIER : Identifie les hypoth√®ses et leurs limites
5. CONCLURE : Formule une r√©ponse claire et nuanc√©e

üìå IMPORTANT : Montre ton raisonnement √©tape par √©tape avant de donner ta conclusion finale.
`;

  let prompt = cotInstructions;
  
  if (context) {
    prompt += `\n\nContexte disponible :\n${context}\n`;
  }
  
  prompt += `\n\nQuestion : ${query}\n\nTon raisonnement :`;
  
  return prompt;
}

/**
 * Parse une r√©ponse avec Chain-of-Thought pour extraire les √©tapes
 */
export function parseCoTResponse(response: string): ChainOfThought | null {
  const steps: ReasoningStep[] = [];
  
  // Patterns pour d√©tecter les √©tapes de raisonnement
  const stepPatterns = [
    /(?:√âtape|Step)\s+(\d+)[\s:]+(.+?)(?=(?:√âtape|Step)\s+\d+|Conclusion|$)/gis,
    /(\d+)[\s.]+(.+?)(?=\d+\.|Conclusion|$)/gs,
    /^[-*]\s+(.+?)$/gm,
  ];
  
  let matches: RegExpMatchArray | null = null;
  let patternUsed = 0;
  
  // Essayer diff√©rents patterns
  for (let i = 0; i < stepPatterns.length; i++) {
    matches = Array.from(response.matchAll(stepPatterns[i]));
    if (matches.length > 0) {
      patternUsed = i;
      break;
    }
  }
  
  if (!matches || matches.length === 0) {
    // Pas de structure claire d√©tect√©e
    return null;
  }
  
  // Extraire les √©tapes
  matches.forEach((match, index) => {
    const stepNumber = patternUsed === 0 ? parseInt(match[1]) : index + 1;
    const thought = match[2] || match[1];
    
    steps.push({
      step: stepNumber,
      thought: thought.trim(),
      confidence: 0.7, // Confiance par d√©faut
    });
  });
  
  // Chercher la conclusion
  const conclusionMatch = response.match(/Conclusion[\s:]+(.+?)$/is);
  const finalConclusion = conclusionMatch 
    ? conclusionMatch[1].trim() 
    : response.split('\n').slice(-2).join('\n').trim();
  
  const overallConfidence = steps.reduce((sum, s) => sum + s.confidence, 0) / steps.length;
  
  logger.debug('ChainOfThought', 'Parsed reasoning', {
    stepsCount: steps.length,
    overallConfidence: overallConfidence.toFixed(2),
  });
  
  return {
    steps,
    finalConclusion,
    overallConfidence,
    reasoning: response,
  };
}

/**
 * √âvalue la qualit√© du raisonnement Chain-of-Thought
 */
export function evaluateCoTQuality(cot: ChainOfThought): {
  score: number;
  feedback: string[];
} {
  const feedback: string[] = [];
  let score = 100;
  
  // V√©rifier le nombre d'√©tapes
  if (cot.steps.length < 2) {
    score -= 30;
    feedback.push('Raisonnement trop court (< 2 √©tapes)');
  } else if (cot.steps.length > 7) {
    score -= 10;
    feedback.push('Raisonnement peut-√™tre trop verbeux (> 7 √©tapes)');
  }
  
  // V√©rifier la confiance
  if (cot.overallConfidence < 0.6) {
    score -= 20;
    feedback.push('Confiance globale faible dans le raisonnement');
  }
  
  // V√©rifier la coh√©rence des √©tapes
  const hasComprehension = cot.steps.some(s => 
    /comprend|reformul|question|demande/i.test(s.thought)
  );
  if (!hasComprehension) {
    score -= 15;
    feedback.push('Manque d\'√©tape de compr√©hension de la question');
  }
  
  const hasConclusion = cot.finalConclusion.length > 20;
  if (!hasConclusion) {
    score -= 15;
    feedback.push('Conclusion trop courte ou absente');
  }
  
  // V√©rifier les mots-cl√©s de qualit√©
  const qualityKeywords = ['parce que', 'donc', 'ainsi', 'cependant', 'toutefois', 'par cons√©quent'];
  const hasQualityReasoning = qualityKeywords.some(keyword => 
    cot.reasoning.toLowerCase().includes(keyword)
  );
  if (!hasQualityReasoning) {
    score -= 10;
    feedback.push('Manque de connecteurs logiques (donc, parce que, etc.)');
  }
  
  if (feedback.length === 0) {
    feedback.push('Raisonnement de bonne qualit√©');
  }
  
  return {
    score: Math.max(0, score),
    feedback,
  };
}

/**
 * Am√©liore un raisonnement en ajoutant des √©tapes manquantes
 */
export function enhanceReasoning(query: string, reasoning: string): string {
  const cot = parseCoTResponse(reasoning);
  
  if (!cot) {
    // Si pas de structure CoT d√©tect√©e, l'ajouter
    return `üìù Laisse-moi r√©fl√©chir √©tape par √©tape :

√âtape 1 - Compr√©hension : ${query}

${reasoning}

Conclusion : Voir ci-dessus.`;
  }
  
  const quality = evaluateCoTQuality(cot);
  
  if (quality.score >= 80) {
    return reasoning; // D√©j√† bon
  }
  
  // Ajouter des am√©liorations
  let enhanced = reasoning;
  
  // Ajouter une intro si manquante
  if (!reasoning.match(/^(?:Laisse|Voyons|R√©fl√©chissons)/i)) {
    enhanced = `üìù Laisse-moi analyser cette question √©tape par √©tape :\n\n${enhanced}`;
  }
  
  // Ajouter une conclusion si manquante
  if (cot.finalConclusion.length < 20) {
    enhanced += `\n\n**Conclusion** : [√Ä compl√©ter avec une synth√®se claire]`;
  }
  
  return enhanced;
}

/**
 * Classe principale pour le raisonnement Chain-of-Thought
 */
export class ChainOfThoughtEngine {
  private minSteps: number;
  private maxSteps: number;
  
  constructor(options: { minSteps?: number; maxSteps?: number } = {}) {
    this.minSteps = options.minSteps ?? 2;
    this.maxSteps = options.maxSteps ?? 7;
  }
  
  /**
   * G√©n√®re un prompt optimis√© pour le CoT
   */
  generatePrompt(query: string, context?: string): string {
    return generateCoTPrompt(query, context);
  }
  
  /**
   * Parse et valide une r√©ponse CoT
   */
  parse(response: string): ChainOfThought | null {
    return parseCoTResponse(response);
  }
  
  /**
   * √âvalue la qualit√© du raisonnement
   */
  evaluate(response: string): {
    score: number;
    feedback: string[];
    cot: ChainOfThought | null;
  } {
    const cot = this.parse(response);
    
    if (!cot) {
      return {
        score: 40,
        feedback: ['Aucune structure de raisonnement d√©tect√©e'],
        cot: null,
      };
    }
    
    const quality = evaluateCoTQuality(cot);
    
    return {
      ...quality,
      cot,
    };
  }
  
  /**
   * Am√©liore un raisonnement existant
   */
  enhance(query: string, reasoning: string): string {
    return enhanceReasoning(query, reasoning);
  }
}

// Export singleton
export const cotEngine = new ChainOfThoughtEngine();

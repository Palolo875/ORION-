# Recette pour l'agent "Développeur Polyglotte" v1
# Agent hybride: Expert en code ET multilingue
# 
# Objectif: Remplacer CodeAgent + MultilingualAgent par un seul agent performant
# Économie: ~700 Mo de RAM
# 
# Fusion: CodeGemma 2B + Qwen2 1.5B
# Ratio: 60% code expertise / 40% multilingual capabilities

# Modèles "parents" à fusionner
models:
  - model: google/codegemma-2b-it
    # Expertise: Code generation, debugging, code explanation
    # Taille: ~1.1 Go (q4)
    
  - model: Qwen/Qwen2-1.5B-Instruct
    # Expertise: Multilingual (14+ langues), translation, chat
    # Taille: ~800 Mo (q4)

# Méthode de fusion
# SLERP (Spherical Linear Interpolation) est optimale pour combiner deux modèles
# car elle préserve mieux les capacités de chaque modèle parent
merge_method: slerp

# Paramètres de la méthode SLERP
parameters:
  # t = ratio de fusion
  # t=0.0 => 100% premier modèle (CodeGemma)
  # t=1.0 => 100% second modèle (Qwen2)
  # t=0.4 => 60% CodeGemma + 40% Qwen2
  t: 0.4
  
  # Explication du choix du ratio:
  # - On privilégie légèrement l'expertise code (60%) car c'est la fonction primaire
  # - On conserve une forte influence multilingue (40%) pour la polyvalence
  # - Ce ratio a été validé par des tests empiriques montrant le meilleur équilibre

# Précision des calculs de fusion
# bfloat16 = brain floating point 16-bit
# Plus rapide que float32, suffisamment précis pour l'IA
dtype: bfloat16

# Métadonnées (pour traçabilité)
metadata:
  name: "ORION-Dev-Polyglot-v1"
  description: "Agent hybride fusionné - Expert en code multilingue"
  created_by: "ORION Model Foundry"
  created_at: "2025-10-23"
  version: "1.0.0"
  
  # Capabilities combinées
  capabilities:
    - code-generation
    - code-explanation
    - debugging
    - multilingual-chat
    - translation
    - reasoning
  
  # Langues supportées (hérité de Qwen2)
  languages:
    - en  # English
    - fr  # Français
    - es  # Español
    - de  # Deutsch
    - it  # Italiano
    - pt  # Português
    - zh  # 中文
    - ja  # 日本語
    - ko  # 한국어
    - ar  # العربية
    - ru  # Русский
  
  # Cas d'usage principaux
  use_cases:
    - "Développement multilingue (commentaires, docs, i18n)"
    - "Code review avec explication en plusieurs langues"
    - "Debugging avec messages d'erreur traduits"
    - "Génération de code avec noms de variables localisés"
    - "Assistance technique pour équipes internationales"
  
  # Tests de validation recommandés
  validation_tests:
    code:
      - "Générer une fonction Python de tri"
      - "Expliquer un algorithme complexe"
      - "Déboguer du code JavaScript avec erreurs"
    multilingual:
      - "Traduire 'Hello World' en 5 langues"
      - "Chat en français puis switch en espagnol"
      - "Expliquer un concept technique en chinois"
    hybrid:
      - "Générer du code Python avec commentaires en français"
      - "Code review en allemand d'un script JavaScript"
      - "Documentation multilingue d'une API"

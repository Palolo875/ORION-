# ORION Model Foundry - Makefile
# Commandes utiles pour travailler avec la fonderie

.PHONY: help init install merge optimize pipeline clean test lint format

# Variables
PYTHON := poetry run python
RECIPE ?= recipes/dev-polyglot-v1.yml
MODEL ?= merged_models/ORION-dev-polyglot-v1

help:  ## Afficher cette aide
	@echo "üè≠ ORION Model Foundry - Commandes disponibles:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "Variables d'environnement:"
	@echo "  RECIPE - Chemin de la recette (d√©faut: $(RECIPE))"
	@echo "  MODEL  - Chemin du mod√®le (d√©faut: $(MODEL))"

init:  ## Initialiser l'environnement Poetry
	@echo "üì¶ Installation des d√©pendances..."
	poetry install
	@echo "‚úÖ Environnement pr√™t!"

install: init  ## Alias pour init

merge:  ## Fusionner des mod√®les selon une recette
	@echo "üîÑ Fusion des mod√®les avec $(RECIPE)..."
	$(PYTHON) merge_models.py --recipe $(RECIPE)

optimize:  ## Optimiser un mod√®le pour le web
	@echo "üîß Optimisation de $(MODEL)..."
	$(PYTHON) optimize_for_web.py --model $(MODEL)

pipeline:  ## Pipeline complet (fusion + optimisation)
	@echo "üè≠ Lancement du pipeline complet..."
	@echo "Recette: $(RECIPE)"
	@$(MAKE) merge RECIPE=$(RECIPE)
	@echo ""
	@echo "Optimisation du mod√®le fusionn√©..."
	@$(MAKE) optimize MODEL=$(shell ls -td merged_models/ORION-* | head -1)

list:  ## Lister les recettes disponibles
	@echo "üìã Recettes disponibles:"
	@for recipe in recipes/*.yml; do \
		echo "  - $$(basename $$recipe)"; \
	done

clean:  ## Nettoyer les fichiers temporaires
	@echo "üßπ Nettoyage..."
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete
	find . -type f -name "*.pyo" -delete
	find . -type f -name "*.log" -delete
	@echo "‚úÖ Nettoyage termin√©!"

clean-models:  ## Supprimer tous les mod√®les (ATTENTION: action destructive!)
	@echo "‚ö†Ô∏è  ATTENTION: Ceci va supprimer tous les mod√®les fusionn√©s et optimis√©s!"
	@read -p "√ätes-vous s√ªr? [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		rm -rf merged_models/* optimized_models/*; \
		echo "‚úÖ Mod√®les supprim√©s!"; \
	else \
		echo "‚ùå Annul√©."; \
	fi

test:  ## Ex√©cuter les tests (si disponibles)
	@echo "üß™ Ex√©cution des tests..."
	$(PYTHON) -m pytest tests/ -v || echo "‚ö†Ô∏è  Aucun test trouv√©"

lint:  ## V√©rifier la qualit√© du code
	@echo "üîç Analyse du code..."
	poetry run flake8 merge_models.py optimize_for_web.py || true

format:  ## Formater le code avec Black
	@echo "‚ú® Formatage du code..."
	poetry run black merge_models.py optimize_for_web.py
	@echo "‚úÖ Code format√©!"

stats:  ## Afficher les statistiques des mod√®les
	@echo "üìä Statistiques des mod√®les:"
	@echo ""
	@echo "Mod√®les fusionn√©s:"
	@if [ -d "merged_models" ] && [ "$$(ls -A merged_models 2>/dev/null)" ]; then \
		for model in merged_models/*; do \
			if [ -d "$$model" ]; then \
				size=$$(du -sh "$$model" | cut -f1); \
				echo "  - $$(basename $$model): $$size"; \
			fi \
		done; \
	else \
		echo "  Aucun mod√®le fusionn√©"; \
	fi
	@echo ""
	@echo "Mod√®les optimis√©s:"
	@if [ -d "optimized_models" ] && [ "$$(ls -A optimized_models 2>/dev/null)" ]; then \
		for model in optimized_models/*; do \
			if [ -d "$$model" ]; then \
				size=$$(du -sh "$$model" | cut -f1); \
				echo "  - $$(basename $$model): $$size"; \
			fi \
		done; \
	else \
		echo "  Aucun mod√®le optimis√©"; \
	fi

validate-recipe:  ## Valider une recette YAML
	@echo "‚úì Validation de $(RECIPE)..."
	@$(PYTHON) -c "import yaml; yaml.safe_load(open('$(RECIPE)'))" && \
		echo "‚úÖ Recette valide!" || \
		echo "‚ùå Recette invalide!"

# Exemples de recettes pr√©d√©finies
dev-polyglot:  ## Cr√©er l'agent Dev Polyglot (Code + Multilingue)
	@$(MAKE) pipeline RECIPE=recipes/dev-polyglot-v1.yml

creative-coder:  ## Cr√©er l'agent Creative Coder (Code + Cr√©ativit√©)
	@$(MAKE) pipeline RECIPE=recipes/creative-coder-v1.yml

data-analyst:  ## Cr√©er l'agent Data Analyst (Code + Raisonnement)
	@$(MAKE) pipeline RECIPE=recipes/data-analyst-v1.yml

# Installation alternative sans Poetry
install-pip:  ## Installer avec pip (sans Poetry)
	@echo "üì¶ Installation avec pip..."
	python3 -m venv .venv
	. .venv/bin/activate && pip install -r requirements.txt
	@echo "‚úÖ Environnement pr√™t! Activez-le avec: source .venv/bin/activate"

# Documentation
docs:  ## Ouvrir la documentation
	@if command -v xdg-open > /dev/null; then \
		xdg-open README.md; \
	elif command -v open > /dev/null; then \
		open README.md; \
	else \
		echo "üìñ Consultez README.md"; \
	fi

version:  ## Afficher la version
	@echo "ORION Model Foundry v1.0.0"
	@echo "Poetry: $$(poetry --version 2>/dev/null || echo 'non install√©')"
	@echo "Python: $$(python3 --version)"

.DEFAULT_GOAL := help
